import logging

from src import config as c
from src.components.battle import Battle
from src.components.conditions import AliveCreature, NotStableCreature, StableCreature, DeadCreature
from src.components.creatures import Player, Monster

logger = logging.getLogger(__name__)
c.enable_logging()


def test_1():
    """
    Проверяет создание существ и поведение счетчика живых существ. Каждый tescase проверяется для игрока и для монстра отдельно.
    Testcase 1: Создание существа;
    Testcase 2: Попытка создания без переданного имени;
    Testcase 3: Попытка создания без переданного кол-ва хп / класса брони / инициативы;
    Testcase 4: Попытка создания с нулевым или отрицательным кол-вом хп / классом брони / инициативой;
    Testcase 5: Проверка поведения счетчика живых существ при создании нового существа и связывании с существующим именем;
    """

    # Проверяем что счетчик не отрабатывает при создании персонажа
    player1 = Player(name='Karlin', hp=20, armour_class=17)
    assert Player.alive_members == 0

    # Проверяем что счетчик отрабатывает при смене состояния
    player1.change_condition(AliveCreature(10))
    assert Player.alive_members == 1

    # Проверяем что счетчик не отрабатывает при повторном присваивании одной и той же переменной

    # # player3 = Player(name='Miriel', hp=22, armour_class=18, initiative=18)
    # monster1 = Monster(name='Werwolf', hp=22, armour_class=18, initiative=18)
    # monster2 = Monster(name='Werwolf', hp=22, armour_class=18, initiative=18)
    #
    # print(Player.alive_members)
    # print(Monster.alive_members)
    #
    # player1 = Player(name='Karlin', hp=20, armour_class=17, initiative=20)
    # print(player1)


def test_2():
    """
    Проверяет добавление игроков к бою.
    Testcase 1: Добавление 1 игрока;
    Testcase 2: Добавление нескольких игроков;
    """
    battle = Battle()

    player1 = Player(name='Karlin', hp=20, armour_class=17)
    player2 = Player(name='Petr', hp=25, armour_class=18)

    battle.add(player1, 10, add_hp=10)
    battle.add(player2, 15)

    # # Проверяем добавление временных хитов перед началом боя
    # assert battle.members[0].hp == 30
    # assert battle.members[1].hp == 25
    #
    # battle.start()
    #
    # # Проверяем что участники отсортированы по убыванию инициативы
    # iterator = iter(battle.members.members[1:])
    # for active in battle.members[:-1]:
    #     next_active = next(iterator)
    #     assert active.initiative > next_active.initiative
    #
    # # Проверяем что при совпадении инициатив запрашивается порядок у клиента


def test_3():
    """
    Проверяет добавление монстров к бою.
    Testcase 1: Добавление 1 монстра 1 типа в начале боя;
    Testcase 2: Добавление 1 монстра 1 типа в середине боя;
    Testcase 3: Добавление 2 монстров 1 типа в начале боя;
    Testcase 4: Добавление 2 монстров 1 типа в середине боя;
    Testcase 5: Добавление 2 монстров 1 типа и 2 монстров 2 типа в начале боя;
    Testcase 6: Добавление 2 монстров 1 типа и 2 монстров 2 типа в середине боя;
    """
    pass


def test_4():
    """
    Проверяет начало боя.
    Testcase 1: Успешное начало боя;
    Testcase 2: Попытка начала боя, если не сформированы обе команды;
    Testcase 3: Попытка начала боя, если не сформирована очередь участников;
    Testcase 4: Попытка начала боя, если очередь не отсортирована по инициативе;
    """
    pass


def test_5():
    """
    Проверяет основной цикл игры.
    Testcase 1: Проверка перехода к следующему участнику (итерации) в середине очереди;
    Testcase 2: Проверка перехода к следующему участнику (итерации) при достижении конца очереди;
    Testcase 3: На итерации еще есть живые игроки в каждой команде (бой продолжается);
    Testcase 4: На итерации в одной из команд больше нет живых игроков (бой заканчивается);
    """
    pass


def test_6():
    """
    Проверяет цикл выбора действия существа. Каждый tescase проверяется для игрока и для монстра отдельно.
    Testcase 1: Доступные действия для участника без сознания;
    Testcase 2: Доступные действия для не стабилизированного участника;
    Testcase 3: Доступные действия для стабилизированного участника (переход к следующей итерации основного цикла);
    Testcase 4: Доступные действия для мертвого участника (переход к следующей итерации основного цикла);
    """
    pass


def test_7():
    """
    Проверяет выбор действия живого существа. Каждый tescase проверяется для игрока и для монстра отдельно.
    Testcase 1: Атака оружием;
    Testcase 2: Атака заклинанием одного существа / нескольких существ;
    Testcase 3: Стабилизация союзника;
    Testcase 4: Хил одного союзника / нескольких союзников / всех союзников;
    Testcase 5: Пропуск хода;
    """
    pass


def test_8():
    """
    Проверяет выбор и фиксацию целей для действия. Каждый tescase проверяется для игрока и для монстра отдельно.
    Testcase 1: Выбор одного союзника;
    Testcase 2: Выбор нескольких союзников;
    Testcase 3: Выбор всех союзников;
    Testcase 4: Выбор одного противника;
    Testcase 5: Выбор нескольких противников;
    """
    pass


def test_9():
    """
    Проверяет переходы между состояниями существа.
    Testcase 1: Переход из живого в не стабилизированное;
    Testcase 2: Переход из живого в стабилизированное (невозможен);
    Testcase 3: Переход из живого в мертвое;
    Testcase 4: Переход из не стабилизированного в живое;
    Testcase 5: Переход из не стабилизированного в стабилизированное;
    Testcase 6: Переход из не стабилизированного в мертвое;
    Testcase 7: Переход из стабилизированного в живое;
    Testcase 8: Переход из стабилизированного в не стабилизированное;
    Testcase 9: Переход из стабилизированного в мертвое;
    Testcase 10: Переход из мертвого в любое (невозможен);
    """
    pass


def test_10():
    """
    Проверяет атаку оружием.
    Testcase 1: Критический промах (1);
    Testcase 2: Промах (< КБ противника);
    Testcase 3: Попадание (>= КБ противника);
    Testcase 4: Критическое попадание (20);
    """
    pass


def test_11():
    """
    Проверяет атаку заклинанием.
    Testcase 1: Неудача (Противник прошел спасбросок);
    Testcase 2: Успех (Противник не прошел спасбросок);
    """
    pass


def test_12():
    """
    Проверяет хил союзника.
    """
    pass


def test_13():
    """
    Проверяет стабилизацию союзника.
    Testcase 1: Спасбросок на Медицину пройден = успех;
    Testcase 2: Спасбросок на Медицину провален = неудача;
    """
    pass


def test_14():
    """
    Проверяет механику спасброска от смерти.
    Testcase 1: Спасбросок на 1;
    Testcase 2: Спасбросок на 2-9;
    Testcase 3: Спасбросок на 10-19;
    Testcase 4: Спасбросок на 20;
    """
    pass


def test_15():
    """
    Проверяет получение существом урона.
    Testcase 1: Кол-во хп после получения урона >0;
    Testcase 2: Кол-во хп после получения урона <=0, но больше по модулю базового кол-ва хп существа;
    Testcase 3: Кол-во хп после получения урона отрицательно и по модулю больше базового;
    """
    pass


def test_16():
    """
    Проверяет выбор еще одного действия после первого (необходим переход к выбору действия, а не к следующей итерации основного цикла)
    """
    pass
